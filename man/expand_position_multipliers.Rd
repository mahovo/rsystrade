% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_position_multiplier_list.R
\name{expand_position_multipliers}
\alias{expand_position_multipliers}
\title{Expand Nested List Of Position Multipliers}
\usage{
expand_position_multipliers(position_multipliers)
}
\arguments{
\item{position_multipliers}{Named list.}
}
\value{
Named list.
}
\description{
Takes a named list of position multipliers and expands it to an appropriate
format for the system. Names are the names of corresponding instruments.
}
\details{
Position multiplier functions must comply with these specifications:
\itemize{
\item Any parameter that is provided with a value when running \code{make_system()},
is a fixed parameter.
\item Parameters that are not fixed are variable params. I.e. any parameter
that is not provided with a value when running \code{make_system()}, is a
variable parameter.
\item The output of a multiplier function must be a list, where the first element
is \code{multiplier}. Any additional elements will appear in
the \code{position_table} as columns. These will typically be intermediate
values calculated by the multiplier function.
}

Additional valid params are:
\itemize{
\item prices
\item instrument_risk
\item rescaled_combined_signal
\item clamped_combined_signal
\item required_leverage_factor
\item subsystem_position
\item notional_exposure
\item target_position_size_units
\item position_size_units
\item position_size_ccy
\item t_last_position_entry
\item latest_trade_direction
\item trade_on
\item direction
\item position_size_ccy
}

In other words, position multiplier functions take the same params as
position modifiers, plus \code{position_size_ccy}, which is provided to
\code{multiply_position()} by \code{modify_position()} when \code{modify_position()}
calls \code{multiply_position()}.

Note that \code{multiply_position()} should only ever be called by
\code{modify_position()}. (This is not enforced.)

IMPORTANT: While only one \emph{position modifier} may be provided to each
instrument, a list of \emph{position multipliers} may be provided. So be very
careful to observe the nesting when providing a list of position
multipliers.

If an instrument name appears more than once, all multipliers associated with
that name will be merged into one list.

Duplicate multiplier names in combination with the same instrument name are
not allowed and will throw an error. Note that even if the multiplier names
must be unique, rsystrade does not check that the corresponding multiplier
functions are unique. So it is possible to assign the same function to
different multiplier names. E.g. if you define multiplier \code{"mult1"} as a
function that doubles the position size, and \code{"mult2"} as a
function that also doubles the position size, the effect will be to
multiply the position size by 4. If this type of behaviour is not your
intention, don't use duplicate multiplier functions for the same instrument
(subsystem).

Note: Each position multiplier list in the list of multipliers follows the
same structure as a position modifier: First element in each input
\code{position_multipliers[[i]]$multipliers[[m]]} list is the multiplier name,
second element is the multiplier function definition itself. Remaining
elements are the fixed params.

Note: You may provide any name as multiplier name. If the multiplier
function is assigned to a variable, you may put this variable as the
function definition. So the function name doesn't have to match the
multiplier name. The multiplier name is just a label for your convenience.

Note: Variable params are not provided by user, i.e. do not appear
in multiplier list.

If the list of data sets only contains \code{"inst1"} and \code{"inst2"}, then \code{"inst3"}
will be ignored when parsing the \code{position_multipliers} list.

The input format of the \code{position_multipliers} list provided to
\code{make_system()} is (example):

\if{html}{\out{<div class="sourceCode R">}}\preformatted{position_multipliers <- list(
  list(
    instruments = list("inst1", "inst2"),
    multipliers = list(
     list(
       "f1",
        f1,
        y1 = 10
     ),
     list(
       "f2",
        f2,
        y2 = 20
     )
    )
  ),
  list(
    instruments = list("inst3", "inst4"),
    multipliers = list(
     list(
       "f3",
        f3,
        y3 = 30
     ),
     list(
       "f4",
        f4,
        y4 = 40
     )
    )
  )
)
}\if{html}{\out{</div>}}

This will be expanded into a list formatted as

\if{html}{\out{<div class="sourceCode R">}}\preformatted{position_multipliers <- list(
  inst1 = list(
   list(
     multiplier_name = "f1",
     multiplier_function = f1,
     variable_params = list(
        x1 = "x1"
     ),
     fixed_params = list(
        y1 = 10
     )
   ),
   list(
     multiplier_name = "f2",
     multiplier_function = f2,
     variable_params = list(
        x2 = "x2"
     ),
     fixed_params = list(
        y2 = 20
     )
   )
  ),
  inst2 = list(
   list(
     multiplier_name = "f1",
     multiplier_function = f1,
     variable_params = list(
        x1 = "x1"
     ),
     fixed_params = list(
        y1 = 10
     )
   ),
   list(
     multiplier_name = "f2",
     multiplier_function = f2,
     variable_params = list(
        x2 = "x2"
     ),
     fixed_params = list(
        y2 = 20
     )
   )
  ),
  inst3 = list(
   list(
     multiplier_name = "f3",
     multiplier_function = f3,
     variable_params = list(
        x3 = "x3"
     ),
     fixed_params = list(
        y3 = 30
     )
   ),
   list(
     multiplier_name = "f4",
     multiplier_function = f4,
     variable_params = list(
        x4 = "x4"
     ),
     fixed_params = list(
        y4 = 40
     )
   )
  ),
  inst4 = list(
   list(
     multiplier_name = "f3",
     multiplier_function = f3,
     variable_params = list(
        x3 = "x3"
     ),
     fixed_params = list(
        y3 = 30
     )
   ),
   list(
     multiplier_name = "f4",
     multiplierr_function = f4,
     variable_params = list(
        x4 = "x4"
     ),
     fixed_params = list(
        y4 = 40
     )
   )
  )
)
}\if{html}{\out{</div>}}
}
