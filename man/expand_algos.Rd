% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_algos.R
\name{expand_algos}
\alias{expand_algos}
\title{Expand algos}
\usage{
expand_algos(algos)
}
\arguments{
\item{algos}{A nested list (see specification above)}
}
\value{
A list where each element is a list containing:
\itemize{
\item \code{instrument} An instrument name. The instrument name is also assigned
to the corresponding data frame as a comment.
\item \code{rule} A list containing one rule variation list (see specification
above.)
}
}
\description{
Takes a nested list of algo specifications and expands it to a list of all
possible permutations.

An algo is composed of one instrument (data) and one rule variation.

Data sets must be csv files in a single folder. The system configuration must
include a path to the data folder. Data sets are referenced by their file
names (excluding extension) as character strings.

A rule variation is a function that produces a trade signal. A
\emph{rule variation} is produced by a \emph{signal generator}, which may implement
several rules to produce one signal. The typical use case for multiple
rules in one \emph{signal generator} would by one rule generating an actual trade
signal, and one rule triggering a position to be closed, e.g. a stop
loss rule. (See vignette: \code{vignette(package = "rsystrade")})

\code{parse_algos()} takes a nested list of algo specifications and expands it to
a list of all possible permutations of instrument names and rules. It then
finally formats the list so that each element is a list containing one
element named \code{instrument} containing an instrument name, and one element
simply named \code{rule} containing
\itemize{
\item one rule variation name
\item one signal generator function, given as a function name which may be
a character string or a variable to which the function is assigned.
Note that the function name should not be followed by parentheses.
\item One list of variable parameters. The first of these must always be \code{t},
which is provided by the system as it runs. Additional variable params,
such as \code{price} will get their values from the instrument data sets.
\item One list of fixed parameters. These are parameters to the signal
generator function which are assigned a value.
}

Note: In the input sublists we have \code{rules} (plural, indicating one or
more), in the output sublists we have \code{rule} (singular).

In the the \code{algos} list, instruments must be provided as a path to a csv
file. (For now. Eventually the way the \code{algos} list is parsed will depends
on the mode, which can be specified as \code{sim} for \emph{simulation mode} or
\code{live} for \emph{live mode}.) Rule variations must be provided as character
string. The \emph{signal generator} name must match the name of a function which
is loaded into the environment in which the system list is stored. In other
words: You must define the signal generators in the same environment as the
one where you call \code{make_system()} (typically the global environment).
\emph{Signal generator} functions included in the rsystrade package are loaded
into the package env, which will also work.

\code{make_system()} loads the unique data sets specified in the parsed algos into
a sublist named \code{inst_data}.

The \code{algos} parameter is a nested list in one in the following forms.
Pairs of one instrument and one signal generator:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{algos <- list(
  list( ## algo 1: algos[[1]]
    instruments = list("instr1"),
    rules = list(rule1)
  )
)
}\if{html}{\out{</div>}}

Or we can apply the same signal generator to multiple instruments:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{algos <- list(
  list( ## algo 1: algos[[1]]
    instruments = list("instr1", "instr2"),
    rules = list(rule1)
  )
)
}\if{html}{\out{</div>}}

Or multiple rules to a single instrument.:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{algos <- list(
  list( ## algo 1: algos[[1]]
    instruments = list("instr1"),
    rules = list(rule1, rule2)
  )
)
}\if{html}{\out{</div>}}

In these examples \code{rule1} represents a rule variation. \code{rule2} represents
another rule variation. An example of a rule variation might look like
this:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{list(
  "mac_2_4",
  r_mac,
  ma_fast = NA,
  ma_slow = NA,
  n_fast = 2L,
  n_slow = 4L,
  gap = 0,
  strict = TRUE,
  binary = FALSE
)
}\if{html}{\out{</div>}}

In this example \code{r_mac} is the name of a function which takes \code{t} as the
first parameter and \code{price} as the second. These are the \emph{variable}
\emph{parameters}, which get input from the system. The remaining \emph{fixed}
\emph{parameters} are specified in the remaining elements in the \emph{rule}
\emph{variation list}.

\code{r_mac} is the name of a \emph{rule function}. We may use \emph{rule functions} directly,
provided that the interface conforms to the standardized interface of a
\emph{signal generator}. Alternatively we may use a \emph{signal generator}, the name of
which should be prefixed by \code{s_}. We may combine several \emph{rule functions}
in one \emph{signal generator}.

Subsets are then expanded to all possible permutations:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{input <- list(
  list( ## algo 1: algos[[1]]
    instrument = "inst1",
    rule = list(
      rule_variation = "rule_variation_1",
      signal_generator = signal_generator_1,
      variable_params = variable_params_1,
      fixed_params = fixed_params_1,
    )
  ),
  list( ## algo 2: algos[[2]]
    instrument = "inst2",
    rule = list(
      rule_variation = "rule_variation_1",
      signal_generator = signal_generator_1,
      variable_params = variable_params_1,
      fixed_params = fixed_params_1,
    )
  )
  list( ## algo 3: algos[[3]]
    instrument = "inst1",
    rule = list(
      rule_variation = "rule_variation_2",
      signal_generator = signal_generator_2,
      variable_params = variable_params_2,
      fixed_params = fixed_params_2,
    )
  ),
  list( ## algo 4: algos[[4]]
    instrument = "inst2",
    rule = list(
      rule_variation = "rule_variation_2",
      signal_generator = signal_generator_2,
      variable_params = variable_params_2,
      fixed_params = fixed_params_2,
    )
  )
)
}\if{html}{\out{</div>}}
}
