% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_algos.R
\name{parse_algos}
\alias{parse_algos}
\title{Parse algos list}
\usage{
parse_algos(algos, mode = "sim")
}
\arguments{
\item{algos}{A nested list (see specification above)}

\item{mode}{\code{sim} for simulation mode or \code{live} for live trading mode.}
}
\value{
A list where each element is a list containing:
\itemize{
\item \code{instrument} An instrument name. The instrument name is also assigned
to the data frame as a comment.
\item \code{data} Corresponding data frame.
\item \code{rule} A list containing one opening rule function and one closing rule
function.
}
}
\description{
Loads data and rules into the system by parsing a list of algos.

An algo is composed of one instrument (data) and one rule (functions).

A "rule" is a combination of one opening rule and one closing rule.

\code{parse_algos()} takes a nested list of algo specifications and expands it to
a list of all possible permutations, then loads instrument data into the
elements in the list. Finally formats the list so that each element is a
list containing one instrument name, one corresponding data element and one
list named \code{rule} containing one opening rule function and one closing rule
function.

Note: In the input sublists we have \code{rules} (plural, indicating one or
more), in the output sublists we have \code{rule} (singular).

In the the \code{algos} list, instruments must be provided as a path to a csv
file. Rules must be provided as functions. (For now. Eventually the way
the \code{algos} list is parsed will depend on the mode, which can be specified
as \code{sim} for \emph{simulation mode} or \code{live} for \emph{live mode}.)

The \code{algos} parameter is a nested list in one in the following forms.
Pairs of one instrument and one rule:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{algos <- list(
  list( ## algo 1: algos[[1]]
    instruments = list("instr1"),
    rules = list(rule1)
  ),
  list( ## algo 2: algos[[2]]
    instruments = list("instr2"),
    rules = list(rule2)
  )
)
}\if{html}{\out{</div>}}

Or we can apply the same rule to multiple instruments:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{algos <- list(
  list( ## algo 1: algos[[1]]
    instruments = list("instr1", "instr2"),
    rules = list(rule1)
  )
)
}\if{html}{\out{</div>}}

Or multiple rules to a single instrument.:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{algos <- list(
  list( ## algo 1: algos[[1]]
    instruments = list("instr1"),
    rules = list(rule1, rule2)
  )
)
}\if{html}{\out{</div>}}

In these examples \code{rule1} is the name of a list containing one opening rule
and one closing rule. \code{rule2} is the name of another list containing one
opening rule function and one closing rule function.

Subsets are then expanded to all possible permutations:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{input <- list(
  list( ## algo 1: algos[[1]]
    instrument = "<instr_1_data_frame>",
    data = <data_frame>,
    rule = rule1
  ),
  list( ## algo 2: algos[[2]]
    instrument = "<instr_name_2>",
    data = <instr_2_data_frame>,
    rule = rule1
  )
  list( ## algo 3: algos[[3]]
    instrument = "<instr_1_data_frame>",
    data = <data_frame>,
    rule = rule2
  ),
  list( ## algo 4: algos[[4]]
    instrument = "<instr_2_data_frame>",
    data = <data_frame>,
    rule = rule2
  )
)
}\if{html}{\out{</div>}}
}
